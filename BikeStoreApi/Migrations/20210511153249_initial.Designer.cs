// <auto-generated />
using System;
using BikeStoreApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BikeStoreApi.Migrations
{
    [DbContext(typeof(BikeRentalContext))]
    [Migration("20210511153249_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BikeAgencyLibrary.Bike", b =>
                {
                    b.Property<int>("BikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RateId")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("BikeId");

                    b.HasIndex("FeatureId");

                    b.HasIndex("RateId");

                    b.ToTable("Bikes");
                });

            modelBuilder.Entity("BikeAgencyLibrary.BikeType", b =>
                {
                    b.Property<int>("BikeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BikeTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BikeTypeId");

                    b.ToTable("BikeTypes");
                });

            modelBuilder.Entity("BikeAgencyLibrary.BikesInShop", b =>
                {
                    b.Property<int>("BikesInShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BikeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTimeIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeOut")
                        .HasColumnType("datetime2");

                    b.Property<string>("OtherDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("BikesInShopId");

                    b.HasIndex("BikeId");

                    b.HasIndex("ShopId")
                        .IsUnique();

                    b.ToTable("BikesInShops");
                });

            modelBuilder.Entity("BikeAgencyLibrary.CartLine", b =>
                {
                    b.Property<int>("CartLineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BikeId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("RentalId")
                        .HasColumnType("int");

                    b.HasKey("CartLineID");

                    b.HasIndex("BikeId");

                    b.HasIndex("RentalId");

                    b.ToTable("CartLine");
                });

            modelBuilder.Entity("BikeAgencyLibrary.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BikeAgencyLibrary.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.HasIndex("ShopId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("BikeAgencyLibrary.PaymentStatus", b =>
                {
                    b.Property<int>("PaymentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PaymentStatusCode")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentStatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentStatusId");

                    b.ToTable("PaymentStatuses");
                });

            modelBuilder.Entity("BikeAgencyLibrary.Rental", b =>
                {
                    b.Property<int>("RentalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActualEndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualStartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("BikeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookedEndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BookedStartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustId")
                        .HasColumnType("int");

                    b.Property<string>("OtherDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PaymentStatusCode")
                        .HasColumnType("bit");

                    b.Property<int?>("PaymentStatusCodeNavigationPaymentStatusId")
                        .HasColumnType("int");

                    b.Property<int>("RateId")
                        .HasColumnType("int");

                    b.Property<string>("RentalPaymentDue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RentalPaymentMade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Rented")
                        .HasColumnType("bit");

                    b.HasKey("RentalId");

                    b.HasIndex("BikeId");

                    b.HasIndex("CustId");

                    b.HasIndex("PaymentStatusCodeNavigationPaymentStatusId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("BikeAgencyLibrary.RentalDetail", b =>
                {
                    b.Property<int>("BikeId")
                        .HasColumnType("int")
                        .HasColumnName("BikeID");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<int>("RateId")
                        .HasColumnType("int")
                        .HasColumnName("RateID");

                    b.Property<int>("RentalDetailId")
                        .HasColumnType("int")
                        .HasColumnName("RentalDetailId");

                    b.HasIndex("BikeId");

                    b.HasIndex("RateId");

                    b.ToTable("RentalDetails");
                });

            modelBuilder.Entity("BikeAgencyLibrary.RentalRate", b =>
                {
                    b.Property<int>("RentalRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("DailyRate")
                        .HasColumnType("float");

                    b.Property<decimal?>("HourlyRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("RentalRateId");

                    b.ToTable("RentalRates");
                });

            modelBuilder.Entity("BikeAgencyLibrary.Shop", b =>
                {
                    b.Property<int>("ShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("ShopId");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("BikeAgencyLibrary.SpecialFeature", b =>
                {
                    b.Property<int>("SpecialFeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllTerrain")
                        .HasColumnType("bit");

                    b.Property<bool>("Basket")
                        .HasColumnType("bit");

                    b.Property<bool>("ChildSeat")
                        .HasColumnType("bit");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ElectricMotor")
                        .HasColumnType("bit");

                    b.HasKey("SpecialFeatureId");

                    b.ToTable("SpecialFeatures");
                });

            modelBuilder.Entity("BikeAgencyLibrary.Bike", b =>
                {
                    b.HasOne("BikeAgencyLibrary.SpecialFeature", "Feature")
                        .WithMany("Bikes")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeAgencyLibrary.RentalRate", "Rate")
                        .WithMany("Bikes")
                        .HasForeignKey("RateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Rate");
                });

            modelBuilder.Entity("BikeAgencyLibrary.BikesInShop", b =>
                {
                    b.HasOne("BikeAgencyLibrary.Bike", "Bike")
                        .WithMany("BikesInShops")
                        .HasForeignKey("BikeId");

                    b.HasOne("BikeAgencyLibrary.Shop", "Shop")
                        .WithOne("BikesInShop")
                        .HasForeignKey("BikeAgencyLibrary.BikesInShop", "ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bike");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("BikeAgencyLibrary.CartLine", b =>
                {
                    b.HasOne("BikeAgencyLibrary.Bike", "Bike")
                        .WithMany()
                        .HasForeignKey("BikeId");

                    b.HasOne("BikeAgencyLibrary.Rental", null)
                        .WithMany("Lines")
                        .HasForeignKey("RentalId");

                    b.Navigation("Bike");
                });

            modelBuilder.Entity("BikeAgencyLibrary.Employee", b =>
                {
                    b.HasOne("BikeAgencyLibrary.Shop", "Shop")
                        .WithMany("Employees")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("BikeAgencyLibrary.Rental", b =>
                {
                    b.HasOne("BikeAgencyLibrary.Bike", "Bike")
                        .WithMany("Rentals")
                        .HasForeignKey("BikeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeAgencyLibrary.Customer", "Cust")
                        .WithMany("Rentals")
                        .HasForeignKey("CustId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeAgencyLibrary.PaymentStatus", "PaymentStatusCodeNavigation")
                        .WithMany("Rentals")
                        .HasForeignKey("PaymentStatusCodeNavigationPaymentStatusId");

                    b.Navigation("Bike");

                    b.Navigation("Cust");

                    b.Navigation("PaymentStatusCodeNavigation");
                });

            modelBuilder.Entity("BikeAgencyLibrary.RentalDetail", b =>
                {
                    b.HasOne("BikeAgencyLibrary.Bike", "Bike")
                        .WithMany()
                        .HasForeignKey("BikeId")
                        .HasConstraintName("FK_RentalDetails_Bikes")
                        .IsRequired();

                    b.HasOne("BikeAgencyLibrary.Rental", "Rental")
                        .WithMany()
                        .HasForeignKey("RateId")
                        .HasConstraintName("FK_RentalDetails_Rentals")
                        .IsRequired();

                    b.HasOne("BikeAgencyLibrary.RentalRate", "Rate")
                        .WithMany()
                        .HasForeignKey("RateId")
                        .HasConstraintName("FK_RentalDetails_RentalRates")
                        .IsRequired();

                    b.Navigation("Bike");

                    b.Navigation("Rate");

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("BikeAgencyLibrary.Bike", b =>
                {
                    b.Navigation("BikesInShops");

                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("BikeAgencyLibrary.Customer", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("BikeAgencyLibrary.PaymentStatus", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("BikeAgencyLibrary.Rental", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("BikeAgencyLibrary.RentalRate", b =>
                {
                    b.Navigation("Bikes");
                });

            modelBuilder.Entity("BikeAgencyLibrary.Shop", b =>
                {
                    b.Navigation("BikesInShop");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("BikeAgencyLibrary.SpecialFeature", b =>
                {
                    b.Navigation("Bikes");
                });
#pragma warning restore 612, 618
        }
    }
}
